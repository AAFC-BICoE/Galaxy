<?xml version="1.0" ?>
<tool id="parallel_pick_otus_trie" name="parallel pick otus trie" version="1.7.0">
	<description>Parallel pick otus using a trie</description>
	<requirements>
<requirement type="package" version="1.7.0">qiime</requirement>	</requirements>
	<command>parallel_pick_otus_trie.py -i $input_fasta_fp -o parallel_pick_otus_trie_output
#if $prefix_length:
 -p $prefix_length
#end if

#if $jobs_to_start:
 -O $jobs_to_start
#end if

#if $retain_temp_files:
 -R
#end if

#if $poll_directly:
 -T
#end if

#if $suppress_polling:
 -W
#end if

#if str($job_prefix):
 -X $job_prefix
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if
;
compress_path.py -i parallel_pick_otus_trie_output -o $output_dir
</command>
	<inputs>
		<param label="-i/--input_fasta_fp: full path to input_fasta_fp" name="input_fasta_fp" optional="False" type="data"/>
		<param default="5" label="-p/--prefix_length: prefix length used to split the input. Must be smaller than the shortest seq in input! [default: 5]" name="prefix_length" optional="True" type="integer"/>
		<param default="1" label="-O/--jobs_to_start: Number of jobs to start [default: 1]" name="jobs_to_start" optional="True" type="integer"/>
		<param label="-R/--retain_temp_files: retain temporary files after runs complete (useful for debugging) [default: False]" name="retain_temp_files" selected="False" type="boolean"/>
		<param label="-T/--poll_directly: Poll directly for job completion rather than running poller as a separate job. If -T is specified this script will not return until all jobs have completed. [default: False]" name="poll_directly" selected="False" type="boolean"/>
		<param label="-W/--suppress_polling: suppress polling of jobs and merging of results upon completion [default: False]" name="suppress_polling" selected="False" type="boolean"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
		<param default="60" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 60]" name="seconds_to_sleep" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>This script performs like the pick_otus.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel. The script uses the first p bases of each read to sort all reads into separate buckets and then each buckets is processed separately. Note that in cases of amplicon sequencing we do not expect the buckets to be even sized, but rather a few buckets make up the majority of reads. Thus, not all combination of prefix length p and number of CPUS -O make sense. Good combinations for a small desktop multicore system would be -p 5 (default) and -O 4. For larger clusters, we suggest -p 10 and -O 20. Increasing -p to a value much larger than 10 will lead to lots of temporary files and many small jobs, so likely will not speed up the OTU picking. On the other hand, the max speed-up is bounded by the size of the largest buckets, so adding more cores will not always increase efficiency.
The output consists of two files (i.e. seqs_otus.txt and seqs_otus.log). The .txt file is composed of tab-delimited lines, where the first field on each line corresponds to an (arbitrary) cluster identifier, and the remaining fields correspond to sequence identifiers assigned to that cluster. Sequence identifiers correspond to those provided in the input FASTA file. The resulting .log file contains a list of parameters passed to this script along with the output location of the resulting .txt file.</help>
</tool>
