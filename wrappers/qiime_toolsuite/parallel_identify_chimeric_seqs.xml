<?xml version="1.0" ?>
<tool id="parallel_identify_chimeric_seqs" name="parallel identify chimeric seqs" version="1.7.0">
	<description>Parallel chimera detection</description>
	<requirements>
		<requirement type="package">qiime</requirement>
	</requirements>
	<command>
#if str($blast_db) != 'None':
 uncompress_tgz.py -i $blast_db -o blast_db;
 BLAST_DB_NAME=`get_blast_db_path.py -i blast_db`;
#end if
parallel_identify_chimeric_seqs.py -i $input_fasta_fp
#if str($aligned_reference_seqs_fp) != 'None':
 -a $aligned_reference_seqs_fp
#end if

#if str($id_to_taxonomy_fp) != 'None':
 -t $id_to_taxonomy_fp
#end if

#if str($reference_seqs_fp) != 'None':
 -r $reference_seqs_fp
#end if

#if str($blast_db) != 'None':
 -b \$BLAST_DB_NAME
#end if

#if str($chimera_detection_method) != 'None':
 -m $chimera_detection_method
#end if

#if $num_fragments:
 -n $num_fragments
#end if

#if $taxonomy_depth:
 -d $taxonomy_depth
#end if

#if $max_e_value:
 -e $max_e_value
#end if

#if $min_div_ratio:
 --min_div_ratio=$min_div_ratio
#end if
 -o $output_fp
#if $jobs_to_start:
 -O $jobs_to_start
#end if

#if $retain_temp_files:
 -R
#end if

#if $poll_directly:
 -T
#end if

#if $suppress_polling:
 -W
#end if

#if str($job_prefix):
 -X $job_prefix
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if
</command>
	<inputs>
		<param label="-i/--input_fasta_fp: path to the input fasta file" name="input_fasta_fp" optional="False" type="data"/>
		<param default="/home/kevin/qiime_software/core_set_aligned.fasta.imputed" label="-a/--aligned_reference_seqs_fp: Path to (Py)Nast aligned reference sequences. REQUIRED when method ChimeraSlayer [default: /home/kevin/qiime_software/core_set_aligned.fasta.imputed]" name="aligned_reference_seqs_fp" optional="True" type="data"/>
		<param label="-t/--id_to_taxonomy_fp: Path to tab-delimited file mapping sequences to assigned taxonomy. Each assigned taxonomy is provided as a comma-separated list. [default: None; REQUIRED when method is blast_fragments]" name="id_to_taxonomy_fp" optional="True" type="data"/>
		<param label="-r/--reference_seqs_fp: Path to reference sequences (used to build a blast db when method blast_fragments). [default: None; REQUIRED when method blast_fragments if no blast_db is provided;]" name="reference_seqs_fp" optional="True" type="data"/>
		<param label="-b/--blast_db: Database to blast against. Must provide either --blast_db or --reference_seqs_fp when method is blast_fragments [default: None]" name="blast_db" optional="True" type="data"/>
		<param label="-m/--chimera_detection_method: Chimera detection method. Choices: blast_fragments or ChimeraSlayer. [default:ChimeraSlayer]" name="chimera_detection_method" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="blast_fragments">blast_fragments</option>
			<option value="ChimeraSlayer">ChimeraSlayer</option>
		</param>
		<param default="3" label="-n/--num_fragments: Number of fragments to split sequences into (i.e., number of expected breakpoints + 1) [default: 3]" name="num_fragments" optional="True" type="integer"/>
		<param default="4" label="-d/--taxonomy_depth: Number of taxonomic divisions to consider when comparing taxonomy assignments [default: 4]" name="taxonomy_depth" optional="True" type="integer"/>
		<param default="1e-30" label="-e/--max_e_value: Max e-value to assign taxonomy [default: 1e-30]" name="max_e_value" optional="True" type="float"/>
		<param default="None" label="--min_div_ratio: min divergence ratio (passed to ChimeraSlayer). If set to None uses ChimeraSlayer default value.  [default: None]" name="min_div_ratio" optional="True" type="float"/>
		<param default="1" label="-O/--jobs_to_start: Number of jobs to start [default: 1]" name="jobs_to_start" optional="True" type="integer"/>
		<param label="-R/--retain_temp_files: retain temporary files after runs complete (useful for debugging) [default: False]" name="retain_temp_files" selected="False" type="boolean"/>
		<param label="-T/--poll_directly: Poll directly for job completion rather than running poller as a separate job. If -T is specified this script will not return until all jobs have completed. [default: False]" name="poll_directly" selected="False" type="boolean"/>
		<param label="-W/--suppress_polling: suppress polling of jobs and merging of results upon completion [default: False]" name="suppress_polling" selected="False" type="boolean"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
		<param default="60" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 60]" name="seconds_to_sleep" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="txt" name="output_fp"/>
	</outputs>
	<help>This script works like the identify_chimeric_seqs.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel.
The result of parallel_identify_chimeric_seqs.py is a text file that identifies which sequences are chimeric.</help>
</tool>
