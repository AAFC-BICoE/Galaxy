<?xml version="1.0" ?>
<tool id="parallel_pick_otus_blast" name="parallel pick otus blast" version="1.7.0">
	<description>Parallel pick otus using BLAST</description>
	<requirements>
<requirement type="package" version="1.7.0">qiime</requirement>	</requirements>
	<command>
#if str($blast_db) != 'None':
 uncompress_tgz.py -i $blast_db -o blast_db;
 BLAST_DB_NAME=`get_blast_db_path.py -i blast_db`;
#end if
parallel_pick_otus_blast.py -i $input_fasta_fp -o parallel_pick_otus_blast_output
#if str($max_e_value):
 -e $max_e_value
#end if

#if $similarity:
 -s $similarity
#end if

#if str($refseqs_fp) != 'None':
 -r $refseqs_fp
#end if

#if str($blast_db) != 'None':
 -b \$BLAST_DB_NAME
#end if

#if $min_aligned_percent:
 --min_aligned_percent=$min_aligned_percent
#end if

#if $jobs_to_start:
 -O $jobs_to_start
#end if

#if $retain_temp_files:
 -R
#end if

#if $poll_directly:
 -T
#end if

#if $suppress_polling:
 -W
#end if

#if str($job_prefix):
 -X $job_prefix
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if
;
compress_path.py -i parallel_pick_otus_blast_output -o $output_dir
</command>
	<inputs>
		<param label="-i/--input_fasta_fp: full path to input_fasta_fp" name="input_fasta_fp" optional="False" type="data"/>
		<param default="1e-10" label="-e/--max_e_value: Max E-value [default: 1e-10]" name="max_e_value" optional="True" type="text"/>
		<param default="0.97" label="-s/--similarity: Sequence similarity threshold [default: 0.97]" name="similarity" optional="True" type="float"/>
		<param label="-r/--refseqs_fp: full path to template alignment [default: None]" name="refseqs_fp" optional="True" type="data"/>
		<param label="-b/--blast_db: database to blast against [default: None]" name="blast_db" optional="True" type="data"/>
		<param default="0.5" label="--min_aligned_percent: Minimum percent of query sequence that can be aligned to consider a hit (BLAST OTU picker only) [default: 0.5]" name="min_aligned_percent" optional="True" type="float"/>
		<param default="1" label="-O/--jobs_to_start: Number of jobs to start [default: 1]" name="jobs_to_start" optional="True" type="integer"/>
		<param label="-R/--retain_temp_files: retain temporary files after runs complete (useful for debugging) [default: False]" name="retain_temp_files" selected="False" type="boolean"/>
		<param label="-T/--poll_directly: Poll directly for job completion rather than running poller as a separate job. If -T is specified this script will not return until all jobs have completed. [default: False]" name="poll_directly" selected="False" type="boolean"/>
		<param label="-W/--suppress_polling: suppress polling of jobs and merging of results upon completion [default: False]" name="suppress_polling" selected="False" type="boolean"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
		<param default="60" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 60]" name="seconds_to_sleep" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>This script performs like the pick_otus.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel.
The output consists of two files (i.e. seqs_otus.txt and seqs_otus.log). The .txt file is composed of tab-delimited lines, where the first field on each line corresponds to an (arbitrary) cluster identifier, and the remaining fields correspond to sequence identifiers assigned to that cluster. Sequence identifiers correspond to those provided in the input FASTA file. The resulting .log file contains a list of parameters passed to this script along with the output location of the resulting .txt file.</help>
</tool>
