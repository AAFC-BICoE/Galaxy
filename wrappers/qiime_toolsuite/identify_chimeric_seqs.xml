<?xml version="1.0" ?>
<tool id="identify_chimeric_seqs" name="identify chimeric seqs" version="1.7.0">
	<description>Identify chimeric sequences in input FASTA file</description>
	<requirements>
<requirement type="package" version="1.7.0">qiime</requirement>	</requirements>
	<command>
#if str($blast_db) != 'None':
 uncompress_tgz.py -i $blast_db -o blast_db;
 BLAST_DB_NAME=`get_blast_db_path.py -i blast_db`;
#end if
identify_chimeric_seqs.py -i $input_fasta_fp
#if str($id_to_taxonomy_fp) != 'None':
 -t $id_to_taxonomy_fp
#end if

#if str($reference_seqs_fp) != 'None':
 -r $reference_seqs_fp
#end if

#if str($aligned_reference_seqs_fp) != 'None':
 -a $aligned_reference_seqs_fp
#end if

#if str($blast_db) != 'None':
 -b \$BLAST_DB_NAME
#end if

#if str($chimera_detection_method) != 'None':
 -m $chimera_detection_method
#end if

#if $num_fragments:
 -n $num_fragments
#end if

#if $taxonomy_depth:
 -d $taxonomy_depth
#end if

#if $max_e_value:
 -e $max_e_value
#end if

#if $min_div_ratio:
 -R $min_div_ratio
#end if

#if $keep_intermediates:
 -k
#end if

#if $suppress_usearch61_intermediates:
 --suppress_usearch61_intermediates
#end if

#if $suppress_usearch61_ref:
 --suppress_usearch61_ref
#end if

#if $suppress_usearch61_denovo:
 --suppress_usearch61_denovo
#end if

#if $split_by_sampleid:
 --split_by_sampleid
#end if

#if str($non_chimeras_retention):
 --non_chimeras_retention=$non_chimeras_retention
#end if

#if $usearch61_minh:
 --usearch61_minh=$usearch61_minh
#end if

#if $usearch61_xn:
 --usearch61_xn=$usearch61_xn
#end if

#if $usearch61_dn:
 --usearch61_dn=$usearch61_dn
#end if

#if $usearch61_mindiffs:
 --usearch61_mindiffs=$usearch61_mindiffs
#end if

#if $usearch61_mindiv:
 --usearch61_mindiv=$usearch61_mindiv
#end if

#if $usearch61_abundance_skew:
 --usearch61_abundance_skew=$usearch61_abundance_skew
#end if

#if $percent_id_usearch61:
 --percent_id_usearch61=$percent_id_usearch61
#end if

#if $minlen:
 --minlen=$minlen
#end if

#if $word_length:
 --word_length=$word_length
#end if

#if $max_accepts:
 --max_accepts=$max_accepts
#end if

#if $max_rejects:
 --max_rejects=$max_rejects
#end if
 -o $output_fp</command>
	<inputs>
		<param label="-i/--input_fasta_fp: path to the input fasta file" name="input_fasta_fp" optional="False" type="data"/>
		<param label="-t/--id_to_taxonomy_fp: Path to tab-delimited file mapping sequences to assigned taxonomy. Each assigned taxonomy is provided as a comma-separated list. [default: None; REQUIRED when method is blast_fragments]" name="id_to_taxonomy_fp" optional="True" type="data"/>
		<param label="-r/--reference_seqs_fp: Path to reference sequences (used to build a blast db when method blast_fragments or reference database for usearch61). [default: None; REQUIRED when method blast_fragments if no blast_db is provided, suppress requirement for usearch61 with --suppress_usearch61_ref;]" name="reference_seqs_fp" optional="True" type="data"/>
		<param label="-a/--aligned_reference_seqs_fp: Path to (Py)Nast aligned reference sequences. REQUIRED when method ChimeraSlayer [default: None]" name="aligned_reference_seqs_fp" optional="True" type="data"/>
		<param label="-b/--blast_db: Database to blast against. Must provide either --blast_db or --reference_seqs_fp when method is blast_fragments [default: None]" name="blast_db" optional="True" type="data"/>
		<param label="-m/--chimera_detection_method: Chimera detection method. Choices: blast_fragments or ChimeraSlayer or usearch61. [default:ChimeraSlayer]" name="chimera_detection_method" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="blast_fragments">blast_fragments</option>
			<option value="ChimeraSlayer">ChimeraSlayer</option>
			<option value="usearch61">usearch61</option>
		</param>
		<param default="3" label="-n/--num_fragments: Number of fragments to split sequences into (i.e., number of expected breakpoints + 1) [default: 3]" name="num_fragments" optional="True" type="integer"/>
		<param default="4" label="-d/--taxonomy_depth: Number of taxonomic divisions to consider when comparing taxonomy assignments [default: 4]" name="taxonomy_depth" optional="True" type="integer"/>
		<param default="1e-30" label="-e/--max_e_value: Max e-value to assign taxonomy [default: 1e-30]" name="max_e_value" optional="True" type="float"/>
		<param default="None" label="-R/--min_div_ratio: min divergence ratio (passed to ChimeraSlayer). If set to None uses ChimeraSlayer default value.  [default: None]" name="min_div_ratio" optional="True" type="float"/>
		<param label="-k/--keep_intermediates: Keep intermediate files, useful for debugging  [default: False]" name="keep_intermediates" selected="False" type="boolean"/>
		<param label="--suppress_usearch61_intermediates: Use to suppress retention of usearch intermediate files/logs.[default: False]" name="suppress_usearch61_intermediates" selected="False" type="boolean"/>
		<param label="--suppress_usearch61_ref: Use to suppress reference based chimera detection with usearch61 [default: False]" name="suppress_usearch61_ref" selected="False" type="boolean"/>
		<param label="--suppress_usearch61_denovo: Use to suppress de novo based chimera detection with usearch61 [default: False]" name="suppress_usearch61_denovo" selected="False" type="boolean"/>
		<param label="--split_by_sampleid: Enable to split sequences by initial SampleID, requires that fasta be in demultiplexed format, e.g., &gt;Sample.1_0, &gt;Sample.2_1, &gt;Sample.1_2, with the initial string before first underscore matching SampleIDs. If not in this format, could cause unexpected errors. [default: False]" name="split_by_sampleid" selected="False" type="boolean"/>
		<param default="union" label="--non_chimeras_retention: usearch61 only - selects subsets of sequences detected as non-chimeras to retain after de novo and reference based chimera detection.  Options are intersection or union.  union will retain sequences that are flagged as non-chimeric from either filter, while intersection will retain only those sequences that are flagged as non-chimeras from both detection methods. [default: union]" name="non_chimeras_retention" optional="True" type="text"/>
		<param default="0.28" label="--usearch61_minh: Minimum score (h) to be classified as chimera. Increasing this value tends to the number of false positives (and also sensitivity).[default: 0.28]" name="usearch61_minh" optional="True" type="float"/>
		<param default="8.0" label="--usearch61_xn: Weight of 'no' vote. Increasing this value tends to the number of false positives (and also sensitivity). Must be &gt; 1.[default: 8.0]" name="usearch61_xn" optional="True" type="float"/>
		<param default="1.4" label="--usearch61_dn: Pseudo-count prior for 'no' votes. (n). Increasing this value tends to the number of false positives (and also sensitivity). Must be &gt; 0.[default: 1.4]" name="usearch61_dn" optional="True" type="float"/>
		<param default="3" label="--usearch61_mindiffs: Minimum number of diffs in a segment. Increasing this value tends to reduce the number of false positives while reducing sensitivity to very low-divergence chimeras. Must be &gt; 0.[default: 3]" name="usearch61_mindiffs" optional="True" type="integer"/>
		<param default="0.8" label="--usearch61_mindiv: Minimum divergence, i.e. 100% - identity between the query and closest reference database sequence. Expressed as a percentage, so the default is 0.8%, which allows chimeras that are up to 99.2% similar to a reference sequence. This value is chosen to improve sensitivity to very low-divergence chimeras.  Must be &gt; 0.[default: 0.8]" name="usearch61_mindiv" optional="True" type="float"/>
		<param default="2.0" label="--usearch61_abundance_skew: Abundance skew setting for de novo chimera detection with usearch61. Must be &gt; 0. [default: 2.0]" name="usearch61_abundance_skew" optional="True" type="float"/>
		<param default="0.97" label="--percent_id_usearch61: Percent identity threshold for clustering with usearch61. [default: 0.97]" name="percent_id_usearch61" optional="True" type="float"/>
		<param default="64" label="--minlen: Minimum length of sequence allowed for usearch61 [default: 64]" name="minlen" optional="True" type="integer"/>
		<param default="8" label="--word_length: word length value for usearch61. [default: 8]" name="word_length" optional="True" type="integer"/>
		<param default="1" label="--max_accepts: max_accepts value to usearch61. [default: 1]" name="max_accepts" optional="True" type="integer"/>
		<param default="8" label="--max_rejects: max_rejects value for usearch61.  [default: 8]" name="max_rejects" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="txt" name="output_fp"/>
	</outputs>
	<help>A FASTA file of sequences, can be screened to remove chimeras (sequences generated due to the PCR amplification of multiple templates or parent sequences). QIIME currently includes a taxonomy-assignment-based approach, blast_fragments, for identifying sequences as chimeric and the ChimeraSlayer algorithm. 

1. Blast_fragments approach: 

The reference sequences (-r) and id-to-taxonomy map (-t) provided are the same format as those provided to assign_taxonomy.py. The reference sequences are in fasta format, and the id-to-taxonomy map contains tab-separated lines where the first field is a sequence identifier, and the second field is the taxonomy separated by semi-colons (e.g., Archaea;Euryarchaeota;Methanobacteriales;Methanobacterium). The reference collection should be derived from a chimera-checked database (such as the full greengenes database), and filtered to contain only sequences at, for example, a maximum of 97% sequence identity.

2. ChimeraSlayer:

ChimeraSlayer uses BLAST to identify potential chimera parents and computes the optimal branching alignment of the query against two parents.
We suggest to use the pynast aligned representative sequences as input.

3. usearch61:

usearch61 performs both de novo (abundance based) chimera and reference based detection.  Unlike the other two chimera checking software, unclustered sequences should be used as input rather than a representative sequence set, as these sequences need to be clustered to get abundance data.  The results can be taken as the union or intersection of all input sequences not flagged as chimeras.  For details, see: http://drive5.com/usearch/usearch_docs.html

The result of identify_chimeric_seqs.py is a text file that identifies which sequences are chimeric.</help>
</tool>
