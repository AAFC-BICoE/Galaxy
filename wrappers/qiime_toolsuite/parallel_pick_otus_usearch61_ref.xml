<?xml version="1.0" ?>
<tool id="parallel_pick_otus_usearch61_ref" name="parallel pick otus usearch61 ref" version="1.7.0">
	<description>Parallel pick otus using usearch_ref</description>
	<requirements>
<requirement type="package" version="1.7.0">qiime</requirement>	</requirements>
	<command>parallel_pick_otus_usearch61_ref.py -i $input_fasta_fp -o parallel_pick_otus_usearch61_ref_output -r $refseqs_fp
#if $similarity:
 -s $similarity
#end if

#if $enable_rev_strand_match:
 -z
#end if

#if str($max_accepts):
 --max_accepts=$max_accepts
#end if

#if str($max_rejects):
 --max_rejects=$max_rejects
#end if

#if str($word_length):
 --word_length=$word_length
#end if

#if $minlen:
 --minlen=$minlen
#end if

#if $usearch_fast_cluster:
 --usearch_fast_cluster
#end if

#if str($usearch61_sort_method):
 --usearch61_sort_method=$usearch61_sort_method
#end if

#if $sizeorder:
 --sizeorder
#end if

#if $jobs_to_start:
 -O $jobs_to_start
#end if

#if $retain_temp_files:
 -R
#end if

#if $poll_directly:
 -T
#end if

#if $suppress_polling:
 -W
#end if

#if str($job_prefix):
 -X $job_prefix
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if
;
compress_path.py -i parallel_pick_otus_usearch61_ref_output -o $output_dir
</command>
	<inputs>
		<param label="-i/--input_fasta_fp: full path to input_fasta_fp" name="input_fasta_fp" optional="False" type="data"/>
		<param label="-r/--refseqs_fp: full path to reference collection" name="refseqs_fp" optional="False" type="data"/>
		<param default="0.97" label="-s/--similarity: Sequence similarity threshold [default: 0.97]" name="similarity" optional="True" type="float"/>
		<param label="-z/--enable_rev_strand_match: Enable reverse strand matching for uclust, uclust_ref, usearch, usearch_ref, usearch61, or usearch61_ref otu picking, will double the amount of memory used. [default: False]" name="enable_rev_strand_match" selected="False" type="boolean"/>
		<param default="default" label="--max_accepts: max_accepts value to uclust, uclust_ref, usearch61, and usearch61_ref.  By default, will use value suggested by method (uclust: 20, usearch61: 1) [default: default]" name="max_accepts" optional="True" type="text"/>
		<param default="default" label="--max_rejects: max_rejects value for uclust, uclust_ref, usearch61, and usearch61_ref.  With default settings, will use value recommended by clustering method used (uclust: 500, usearch61: 8 for usearch_fast_cluster option, 32 for reference and smallmem options) [default: default]" name="max_rejects" optional="True" type="text"/>
		<param default="default" label="--word_length: word length value for uclust, uclust_ref, and usearch, usearch_ref, usearch61, and usearch61_ref. With default setting, will use the setting recommended by the method (uclust: 12, usearch: 64, usearch61: 8).  int value can be supplied to override this setting. [default: default]" name="word_length" optional="True" type="text"/>
		<param default="64" label="--minlen: Minimum length of sequence allowed for usearch, usearch_ref, usearch61, and usearch61_ref. [default: 64]" name="minlen" optional="True" type="integer"/>
		<param label="--usearch_fast_cluster: Use fast clustering option for usearch or usearch61_ref with new clusters.  --enable_rev_strand_match can not be enabled with this option, and the only valid option for usearch61_sort_method is 'length'.  This option uses more memory than the default option for de novo clustering. [default: False]" name="usearch_fast_cluster" selected="False" type="boolean"/>
		<param default="abundance" label="--usearch61_sort_method: Sorting method for usearch61 and usearch61_ref.  Valid options are abundance, length, or None.  If the --usearch_fast_cluster option is enabled, the only sorting method allowed in length. [default: abundance]" name="usearch61_sort_method" optional="True" type="text"/>
		<param label="--sizeorder: Enable size based preference in clustering with usearch61. Requires that --usearch61_sort_method be abundance. [default: False]" name="sizeorder" selected="False" type="boolean"/>
		<param default="1" label="-O/--jobs_to_start: Number of jobs to start [default: 1]" name="jobs_to_start" optional="True" type="integer"/>
		<param label="-R/--retain_temp_files: retain temporary files after runs complete (useful for debugging) [default: False]" name="retain_temp_files" selected="False" type="boolean"/>
		<param label="-T/--poll_directly: Poll directly for job completion rather than running poller as a separate job. If -T is specified this script will not return until all jobs have completed. [default: False]" name="poll_directly" selected="False" type="boolean"/>
		<param label="-W/--suppress_polling: suppress polling of jobs and merging of results upon completion [default: False]" name="suppress_polling" selected="False" type="boolean"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
		<param default="60" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 60]" name="seconds_to_sleep" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>This script works like the pick_otus.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel.
</help>
</tool>
